/* -----------------------------------------
    strings
----------------------------------------- */

String.prototype.noPx = function() {
  return parseInt(this.replace("px", ""));
};

/* -----------------------------------------
    arrays
----------------------------------------- */

Array.prototype.eachStep = function(callback, delay) {
  return new Promise((resolve, reject) => {
    let counter = 0;

    const interval = setInterval(() => {
      callback(this[counter], counter, delay, this);
      counter++;

      if (counter >= this.length) {
        clearInterval(interval);
        resolve(this);
      }
    }, delay);
  });
};

function debounce(f, t) {
  return function(args) {
    let previousCall = this.lastCall;
    this.lastCall = Date.now();
    if (previousCall && this.lastCall - previousCall <= t) {
      clearTimeout(this.lastCallTimer);
    }
    this.lastCallTimer = setTimeout(() => f(args), t);
  };
}

function preloaderStart(){
	const body = document.querySelector("body");
	body.classList.remove("overflow-hidden", "invisible");
}

let isScrolling = false;
const needAnimateElements = document.querySelectorAll(".js-needAnimate");

let once = true;

function throttleScroll(e) {

	if (isScrolling === false) {
		window.requestAnimationFrame(()=> {
			scrolling(e);

			isScrolling = false;
		});
	}
	isScrolling = true;
}


function scrolling(e) {
	needAnimateElements.forEach(element => {
		if (isPartiallyVisible(element)) {
			element.classList.add("animate-active");
		}
	});
}

function isPartiallyVisible(el) {
	let elementBoundary = el.getBoundingClientRect();

	let top = elementBoundary.top;
	let bottom = elementBoundary.bottom;
	let height = elementBoundary.height;
	return top + height >= 0 && height + window.innerHeight - 50 >= bottom;
}

function scrollingStart(){
	scrolling();
	window.addEventListener("scroll", throttleScroll);
}
